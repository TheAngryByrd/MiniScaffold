name: Build master

on: [push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
    - name: Use .NET Core 2.1 SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '2.1.x'
    - name: Use .NET Core 3.1 SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x'
    - name: Use .NET Core 5.0.x SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '5.0.x'
    # Not specifying a version will attempt to install via global.json
    - name: Use .NET Core global.json
      uses: actions/setup-dotnet@v1

    - name: Build
      if: runner.os != 'Windows'
      run: |
        dotnet --info
        echo $PATH
        chmod +x ./build.sh
        ./build.sh
      env:
        # Work around https://github.com/actions/setup-dotnet/issues/29
        DOTNET_ROOT: ${{ runner.tool_cache }}/dncs/${{ matrix.dotnet }}/x64
        CI: true
    - name: Build
      if: runner.os == 'Windows'
      run: |
        dotnet --info
        $path = [System.Environment]::GetEnvironmentVariable(
            'PATH',
            'Machine'
        )
        # Remove unwanted elements
        $path = ($path.Split(';') | Where-Object { $_ -ne 'C:\\Program Files\\dotnet' }) -join ';'
        $path = ($path.Split(';') | Where-Object { $_ -ne 'C:\\Program Files\\dotnet\\' }) -join ';'
        # Set it
        [System.Environment]::SetEnvironmentVariable(
            'PATH',
            $path,
            'Machine'
        )
        $Env:Path
        ./build.cmd
      env:
        # Work around https://github.com/actions/setup-dotnet/issues/29
        DOTNET_ROOT: ${{ runner.tool_cache }}/dncs/${{ matrix.dotnet }}/x64
        CI: true
